Ниже приведён пример **технического задания** (**ТЗ**) для разработчика 1С, которому нужно создать **мини-конфигурацию** «Мини Заказы». Эта конфигурация будет использоваться как тестовый/учебный пример для анализа, миграции, рефакторинга и других экспериментов.

---

## 1. Цель разработки

Создать **упрощённую** конфигурацию 1С «Мини Заказы», которая будет демонстрировать базовые механизмы:

1. Работа со **справочниками** (Контрагенты, Номенклатура).  
2. Оформление **документа** «ЗаказПокупателя» с табличной частью.  
3. Расчёт сумм при записи.  
4. Проведение документа с движением по **регистру накопления**.  
5. Минимальные интерфейсы (формы) для списка и карточки (объекта) документов/справочников.

Цель — иметь **маленькую**, но «целостную» конфигурацию, которую легко перенести/проанализировать, не используя типовые решения (Бухгалтерия, УТ и т.п.). 

---

## 2. Состав конфигурации и требования к объектам

### 2.1. Справочник «Контрагенты»

1. **Реквизиты**:
   - **Наименование** (Строка, 100…200 символов) — основное поле для отображения.
   - **ИНН** (Строка) — можно не проверять на уникальность, поле по желанию.

2. **Формы**:
   - **Форма списка** (отображение всех контрагентов, кнопки «Создать», «Изменить», «Удалить»).  
   - **Форма элемента** (карточка контрагента с редактированием «Наименования» и «ИНН»).

3. **Модули**:
   - Модули объекта и менеджера можно оставить пустыми или с минимальным кодом (например, проверка заполнения реквизитов не обязательна).

### 2.2. Справочник «Номенклатура»

1. **Реквизиты**:
   - **Наименование** (Строка)  
   - **ЕдиницаИзмерения** (Строка, например, «шт», «кг»).

2. **Формы**:
   - **Форма списка** (перечень всех товаров).  
   - **Форма элемента** (редактирование наименования и единицы измерения).

3. **Модули**:
   - Аналогично, могут быть пустыми или с минимальной логикой.

### 2.3. Документ «ЗаказПокупателя»

1. **Реквизиты шапки**:
   - **Контрагент** (Справочник.Контрагенты).  
   - **Дата** (Дата).  
   - **Номер** (Строка или Автонабор).  
   - **СуммаДокумента** (Число, итоговое поле).

2. **Табличная часть «Товары»**:
   - **Номенклатура** (Справочник.Номенклатура).  
   - **Количество** (Число).  
   - **Цена** (Число).  
   - **СуммаСтроки** (Число; рассчитывается как Количество * Цена).

3. **Модуль объекта**:
   - **ПриЗаписи**:  
     1. Перебор табличной части «Товары».  
     2. Расчёт `СуммаСтроки = Количество * Цена`.  
     3. Подсчёт итога по всем строкам в переменную `Сумма` и присвоение `СуммаДокумента = Сумма`.
   - **ПриПроведении**:  
     1. Создание движений по регистру «ЗаказыПоКонтрагентам»:  
        - Очистить движения.  
        - Добавить одну строку, заполнить «Контрагент» и «СуммаЗаказов» = `СуммаДокумента`.  

4. **Формы**:
   - **Форма списка**: отображает список заказов (Номер, Дата, Контрагент, СуммаДокумента). Кнопки «Создать», «Изменить», «Провести», «Удалить».  
   - **Форма объекта**: поля шапки (Контрагент, Дата, Номер, СуммаДокумента [только чтение]) и табличная часть «Товары».

5. **Модуль менеджера**:
   - Необязателен. При желании можно добавить небольшие процедуры (например, «СоздатьДокумент»), но не критично.

### 2.4. Регистр накопления «ЗаказыПоКонтрагентам»

1. **Измерения**:
   - **Контрагент** (Справочник.Контрагенты).

2. **Ресурсы**:
   - **СуммаЗаказов** (Число).

3. **Назначение**:
   - При проведении «ЗаказПокупателя» записывать движение: `(Контрагент, СуммаЗаказа)`.
   - Данных о типе движения (Приход/Расход) можно не делать (достаточно одного ресурса).

---

## 3. Основные бизнес-процессы

1. **Создание/Редактирование справочников**  
   - Пользователь (менеджер/администратор) может завести новых «Контрагентов» и «Номенклатуру».  

2. **Формирование «ЗаказаПокупателя»**  
   - В форме списка «Заказы» нажать «Создать».  
   - Выбрать «Контрагент», заполнить «Товары» (номенклатура, количество, цена).  
   - При записи рассчитывается «СуммаСтроки» в каждой строке, итог «СуммаДокумента».  

3. **Проведение «ЗаказаПокупателя»**  
   - В форме списка (или форме объекта) нажать «Провести».  
   - В регистре «ЗаказыПоКонтрагентам» появляется запись: `Контрагент = <Контрагент документа>, СуммаЗаказов = СуммаДокумента`.  

*(Отчёты по регистру, отмена проведения, сложные сценарии — **не требуются** в рамках тестовой задачи.)*

---

## 4. Условия и ограничения

1. **Версия платформы**: указать, под какую версию 1С (например, 8.3.XX).  
2. **Никаких** сторонних/типовых решений (не нужно подключать БСП, УТ, КА и т. п.).  
3. **Минимальная** логика, без расширенных проверок, без сложных прав доступа.  
4. Интерфейс может быть **упрощённым** — достаточно основных кнопок и колонок.  

---

## 5. Результат и формат

1. **Конфигурация** в виде файла .CF (или .CFE) или выгрузка XML (как удобно).  
2. Тестовые данные — желательно **вручную** завести 2–3 «Контрагента», 2–3 «Номенклатуры», 2–3 «ЗаказПокупателя» (с разными ценами/количествами).  
3. Проверка:  
   - Убедиться, что при записи «ЗаказПокупателя» заполняются «СуммаСтроки» и «СуммаДокумента».  
   - Убедиться, что при проведении **формируется движение** в регистре «ЗаказыПоКонтрагентам».  

---

## 6. Критерии приёмки

1. Конфигурация устанавливается в пустую базу 1С и **корректно** работает.  
2. В справочниках «Контрагенты» и «Номенклатура» можно **создавать**, **редактировать** и **удалять** элементы.  
3. В документе «ЗаказПокупателя» при **записи** корректно считается «СуммаСтроки» в табличной части и «СуммаДокумента».  
4. При **проведении** документа создаётся движение в регистре «ЗаказыПоКонтрагентам» (сумма совпадает с «СуммаДокумента»).  
5. Документ «ЗаказПокупателя» отображается в форме списка (Номер, Дата, Контрагент, СуммаДокумента).  
6. Отсутствие критических ошибок (неожиданные исключения, неправильные ссылки и т. п.).

---

## 7. Формат сдачи

- Передать готовую мини-конфигурацию (файл .CF/.CFE или выгрузку XML) или предоставить доступ к демо-базе.  
- Указать, на какой версии 1С:Предприятие 8.3 тестировалось.  
- При наличии неочевидных нюансов — кратко документировать (например, в виде текстового файла README).

---

### Примечания

- Данная мини-конфигурация используется **как «учебный полигон»**. В дальнейшем планируется её анализ, выгрузка в XML, парсинг модулей, возможно — миграция логики на веб-стек (Go + JavaScript).  
- Главное условие — всё должно быть **простым и понятным**, без сложных механизмов 1С и без привязки к типовым решениям.

---

**Таким образом,** программист 1С, получив это ТЗ, создаст небольшую, но функциональную конфигурацию. После этого её можно будет использовать для тестов, изучения, написания парсеров кода, проектирования миграции или других экспериментов.