Ниже описан **4-й пункт** — **«AST (Abstract Syntax Tree) / Абстрактное синтаксическое дерево»** — применительно к нашей **мини-конфигурации «Мини Заказы»**. На этом уровне мы берём уже **синтаксически разобранный** код (после токенизации и формирования «дерева разбора»), **очищаем** его от лишних «служебных» узлов (скобок, служебных слов, разделителей) и формируем более **понятную** структуру, которая отражает **семантику** кода.

Ниже приводятся концептуальные **примеры**, как мог бы выглядеть AST для ключевых процедур (например, `ПриЗаписи`, `ПриПроведении`) документа «ЗаказПокупателя» на языке 1С. Это **упрощённые** схемы, дающие общее представление; в реальности дерево может быть больше и содержать дополнительные детали.

---

## 1. Что такое AST (Абстрактное синтаксическое дерево)

- **AST** — это структура данных (обычно древовидная), где **каждый узел** описывает некоторую **конструкцию** языка (процедуру, оператор `If`, вызов метода, присвоение и т. д.).  
- В отличие от **Parse Tree**, где часто сохраняются **все** детали грамматики (включая служебные слова, закрывающие теги/операторы), в **AST** мы оставляем **только** **значимые** узлы, отражающие **логику** программы.

---

## 2. Пример кода «ПриЗаписи» (Документ «ЗаказПокупателя»)

Напомним, в модуле объекта 1С может быть что-то вроде:

```bsl
Процедура ПриЗаписи(Отказ, РежимЗаписи)

    Сумма = 0;
    Для Каждого СтрокаТЧ Из Товары Цикл
        СтрокаТЧ.СуммаСтроки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
        Сумма = Сумма + СтрокаТЧ.СуммаСтроки;
    КонецЦикла;
    
    СуммаДокумента = Сумма;

КонецПроцедуры
```

### 2.1. AST (упрощённое представление)

Псевдо-дерево можно представить так (с отступами или скобками):

```
ProcedureNode "ПриЗаписи"
 ├─ Parameters: 
 │   ├─ "Отказ"
 │   └─ "РежимЗаписи"
 ├─ Body (BlockStatement)
 │   ├─ AssignmentStatement
 │   │   ├─ Target: "Сумма"
 │   │   └─ Expression: NumericLiteral(0)
 │   ├─ ForEachStatement (Для Каждого ... Из ... Цикл)
 │   │   ├─ IteratorVariable: "СтрокаТЧ"
 │   │   ├─ Collection: "Товары"
 │   │   └─ Body (BlockStatement)
 │   │       ├─ AssignmentStatement
 │   │       │   ├─ Target: "СтрокаТЧ.СуммаСтроки"
 │   │       │   └─ Expression: BinaryExpression
 │   │       │       ├─ Left: "СтрокаТЧ.Количество"
 │   │       │       ├─ Operator: "*"
 │   │       │       └─ Right: "СтрокаТЧ.Цена"
 │   │       ├─ AssignmentStatement
 │   │       │   ├─ Target: "Сумма"
 │   │       │   └─ Expression: BinaryExpression
 │   │       │       ├─ Left: "Сумма"
 │   │       │       ├─ Operator: "+"
 │   │       │       └─ Right: "СтрокаТЧ.СуммаСтроки"
 │   ├─ AssignmentStatement
 │   │   ├─ Target: "СуммаДокумента"
 │   │   └─ Expression: "Сумма"
```

В таком AST:

1. **Корневой узел** — `ProcedureNode "ПриЗаписи"`:  
   - Имя процедуры: «ПриЗаписи»  
   - Список параметров: [`Отказ`, `РежимЗаписи`]

2. **Body** — «тело процедуры», обычно это **BlockStatement** (список операторов).  

3. Внутри **BlockStatement** видны **операторы** (AssignmentStatement, ForEachStatement, и т.д.).  

4. В `ForEachStatement` мы видим:  
   - `IteratorVariable`: `"СтрокаТЧ"`  
   - `Collection`: `"Товары"`  
   - `Body`: ещё один `BlockStatement` с двумя операторами (два присвоения).

5. **AssignmentStatement** внутри цикла:  
   - `Target = "СтрокаТЧ.СуммаСтроки"`  
   - `Expression = BinaryExpression { Left="СтрокаТЧ.Количество", Operator="*", Right="СтрокаТЧ.Цена" }`.

Таким образом, мы **не** храним прямо слова «Процедура», «КонецПроцедуры», «Для Каждого», «КонецЦикла» — они были в **parse tree**, а в AST у нас уже **смысловая** структура «ProcedureNode», «ForEachStatement» и т. д.

---

## 3. Пример кода «ПриПроведении» (Документ «ЗаказПокупателя»)

Упрощённый код:

```bsl
Процедура ПриПроведении(Отказ, РежимПроведения)

    Движения.ЗаказыПоКонтрагентам.Очистить();
    НоваяСтрока = Движения.ЗаказыПоКонтрагентам.Добавить();
    НоваяСтрока.Контрагент = Контрагент;
    НоваяСтрока.СуммаЗаказов = СуммаДокумента;

КонецПроцедуры
```

### 3.1. AST (примерный)

```
ProcedureNode "ПриПроведении"
 ├─ Parameters:
 │   ├─ "Отказ"
 │   └─ "РежимПроведения"
 └─ Body (BlockStatement)
     ├─ MethodCallStatement
     │   ├─ Target: "Движения.ЗаказыПоКонтрагентам"
     │   └─ MethodName: "Очистить"
     ├─ AssignmentStatement
     │   ├─ Target: "НоваяСтрока"
     │   └─ Expression: MethodCallExpression
     │       ├─ Target: "Движения.ЗаказыПоКонтрагентам"
     │       └─ MethodName: "Добавить"
     ├─ AssignmentStatement
     │   ├─ Target: "НоваяСтрока.Контрагент"
     │   └─ Expression: "Контрагент"
     ├─ AssignmentStatement
     │   ├─ Target: "НоваяСтрока.СуммаЗаказов"
     │   └─ Expression: "СуммаДокумента"
```

В этом AST видны **четыре оператора** (два из них — присвоения, один — вызов метода в виде `MethodCallStatement`, и ещё один присвоение, но его правая часть — `MethodCallExpression`).

---

## 4. Ключевые элементы, которые мы видим в AST

1. **ProcedureNode / FunctionNode**  
   - Хранит имя (`Name`), список параметров (`Parameters`), тело (`Body`).  

2. **BlockStatement**  
   - Список операторов (Statements).  

3. **AssignmentStatement**  
   - `Target` (левая часть) и `Expression` (правая часть).  

4. **MethodCallStatement** / **MethodCallExpression**  
   - Признак, что вызываем метод. Часто разделяют:  
     - **Statement**: вызов в виде самостоятельного оператора (например, `SomeObject.DoSomething();`)  
     - **Expression**: вызов, результат которого присваивается (`X = SomeObject.Add();`).  

5. **ForEachStatement / IfStatement / WhileStatement** и т. д.  
   - Циклы, ветвления, с соответствующими полями (`Condition`, `Body`, `ElseBody` и т. д.).  

6. **BinaryExpression** (арифметика, логические операции)  
   - `Left`, `Operator`, `Right`.  

7. **VariableReference**, **PropertyReference**  
   - «СтрокаТЧ.СуммаСтроки» может внутри AST быть представлен как доступ к свойству «СуммаСтроки» объекта/переменной «СтрокаТЧ».  

---

## 5. Зачем нужен AST в контексте мини-конфигурации

1. **Упрощённый анализ логики**:  
   - Когда мы хотим понять, какие операторы внутри «ПриЗаписи», **AST** позволяет **программно** обходить дерево, находить все присвоения, циклы и вызовы.  

2. **Инструмент для рефакторинга**:  
   - Если нужно автоматически заменить `СтрокаТЧ.Количество * СтрокаТЧ.Цена` на какую-то другую формулу, проще это делать на AST, а не на «сыром» тексте.  

3. **Семантический поиск**:  
   - AST позволяет сказать: «Найди все вызовы метода `Добавить()` на объекте `Движения.ЗаказыПоКонтрагентам`», не полагаясь на простые регулярки.  

4. **Промежуточная стадия** перед Code Model / IR** (п.5)**:  
   - На основе **AST** мы можем строить более высокоуровневую модель (IR), где говорим «это документ, вот его процедуры, вот вызовы регистра».  

---

## 6. Отличие от Parse Tree (Дерева разбора)

- **Parse Tree** может содержать **все** узлы грамматики: ключевое слово `Процедура`, разделитель `(`, идентификатор `Отказ`, запятая, идентификатор `РежимПроведения`, закрывающая скобка, ключевое слово `КонецПроцедуры` и т. д.  
- **AST** уже **абстрагируется** от этого:  
  - Узел типа «ProcedureNode» с именем «ПриПроведении» и списком параметров.  
  - Не храним явно все «КонецПроцедуры» или «Цикл…КонецЦикла» — это лишнее для логического анализа.

---

## 7. Итог

Таким образом, в **AST** для нашей мини-конфигурации «Мини Заказы»:

- Для **каждого модуля** (например, «ЗаказПокупателя.Объект», «ЗаказПокупателя.ФормаОбъекта») мы имеем **список** процедур и функций.  
- Для **каждой процедуры** (например, «ПриЗаписи», «ПриПроведении») мы имеем **древовидное** представление кода: операторы (присвоение, вызов метода, цикл), выражения (арифметика, доступ к свойствам).  
- **Все» служебные слова** и **конструкции** (например, «Процедура … КонецПроцедуры») превращаются в **узлы** и **дочерние узлы** с семантической информацией (ProcedureNode, BlockStatement, ForEachStatement…).  

В конечном счёте, **AST** даёт нам возможность на **программистском уровне** понимать структуру кода документа «ЗаказПокупателя», не запутываясь в синтаксических деталях.