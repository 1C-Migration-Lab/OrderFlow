Ниже приводится **8-й уровень** — **«Domain Model / Предметная модель»** для нашей **мини-конфигурации «Мини Заказы»**. На этом уровне мы **абстрагируемся** от конкретных объектов 1С (Справочник, Документ, Регистр) и описываем **предметную область** в терминах **бизнес-сущностей** (Entites) и их **отношений** (Relationships). 

---

## 1. Ключевые сущности (Entities)

### 1.1. «Контрагент»  
- **Смысл**: Клиент или организация, которой мы продаём товары/услуги.  
- **Характеристики** (атрибуты):  
  - *Наименование* (строка) — короткое или полное имя клиента.  
  - *ИНН* (опционально, строка) — идентификатор для юридических лиц.  
- **Идентификатор**: условный `ID_Контрагента` (в 1С это может быть GUID, в реляционной БД — автоинкремент и т.д.).

### 1.2. «Номенклатура» (Товар)  
- **Смысл**: Товар или услуга, которую мы продаём.  
- **Характеристики**:  
  - *Наименование* (строка) — название товара.  
  - *ЕдиницаИзмерения* (строка) — штуки, килограммы и т.д.  
- **Идентификатор**: `ID_Номенклатуры`.

### 1.3. «Заказ»  
- **Смысл**: Факт оформления заказа на покупку товаров.  
- **Характеристики**:  
  - *Номер* (строка или число) — уникальный идентификатор заказа.  
  - *Дата* (дата/время) — когда заказ оформлен.  
  - *Контрагент* (ссылка на «Контрагент») — от кого поступил заказ.  
  - *СуммаДокумента* (число) — итоговая сумма по всем строкам заказа.  
- **Статус** (опционально): «Непроведён», «Проведён», «Отменён» и т.д. (в нашем упрощённом примере может быть только «Проведён»/«Не проведён»).  
- **Идентификатор**: `ID_Заказа`.  

#### 1.3.1. «ПозицияЗаказа» (Строка табличной части)  
В предметной области мы можем выделить либо встроенную коллекцию «строк» (line items), либо отдельную сущность:

- **Смысл**: Конкретная позиция в заказе, определяющая товар, его количество и цену.  
- **Характеристики**:  
  - *Номенклатура* (ссылка на «Номенклатура»).  
  - *Количество* (число).  
  - *Цена* (число).  
  - *СуммаСтроки* (число; = Количество * Цена).  
- **Связь**: Каждая позиция привязана к одному Заказу. Часто оформляется как «**1 Заказ** : **Многие ПозицииЗаказа**».

> В терминах 1С это «Табличная часть «Товары»». В терминах предметной модели — это отдельная сущность/коллекция «ПозицииЗаказа» внутри «Заказа».

---

## 2. Отношения (Relationships)

1. **Заказ** → **Контрагент**:  
   - Тип: **Многие-за-одного** (many-to-one).  
   - Один заказ имеет **ровно одного** контрагента. Один контрагент может фигурировать во множестве заказов.

2. **Заказ** ↘ **ПозицииЗаказа**:  
   - Тип: **Один-ко-многим** (one-to-many).  
   - Один заказ содержит несколько позиций (строк).  
   - Каждая позиция заказа принадлежит ровно одному заказу.

3. **ПозицииЗаказа** → **Номенклатура**:  
   - Тип: **Многие-за-одного** (many-to-one).  
   - В одной позиции указывается **один** товар, а один и тот же товар может встречаться во множестве заказов и позиций.

---

## 3. Поведение (Domain Logic)

- **Создание Заказа**:  
  - Пользователь указывает контрагента, добавляет одну или несколько позиций (номенклатуру + количество + цена).  
  - Расчитывается «СуммаСтроки» каждой позиции, затем «СуммаДокумента» = сумма всех строк.  

- **Проведение Заказа**:  
  - Бизнес-правило: при «проведении» фиксируется «СуммаДокумента» в общем учёте (в простом виде — обновляется регистр «ЗаказыПоКонтрагентам»).  
  - Возможна дополнительная проверка (например, нет ли запрещённых товаров, достаточно ли прав).  

- **Создание/Редактирование Контрагентов**:  
  - Можем добавлять/изменять наименование и реквизиты контрагента.  
  - (При желании) проверяем уникальность ИНН.

- **Создание/Редактирование Номенклатуры**:  
  - Добавляем новые товары, меняем названия/единицы.  
  - (Опционально) можно хранить цены, но в упрощённой версии цена указывается прямо в заказе.

---

## 4. Связь с бизнес-процессами

- **Создание заказа** → Сущности «Заказ» и «ПозицияЗаказа» и ссылка на «Контрагент».  
- **Проведение** → меняется статус «Заказа» и обновляются показатели (регистр «ЗаказыПоКонтрагентам»).  
- **Справочники** «Контрагент», «Номенклатура» → базовые сущности для указания в заказе.

---

## 5. Пример диаграммы (упрощённая ER/UML)

``` 
     Контрагент
     +------------+
     |ID_Контрагента (PK) 
     |Наименование
     |ИНН
     +------------+
           ^
           |
  (многие)  |  
           |
  Заказ +--------------+  (многие) ПозицияЗаказа +---------------------+
  +--------------------+    +---------------------+                     |
  |ID_Заказа (PK)      |    |ID_Позиции (PK)     |                     |
  |Номер               |    |Количество          |                     |
  |Дата                |    |Цена               |                     |
  |СуммаДокумента      |    |СуммаСтроки         |                     |
  |ID_Контрагента (FK) |<-- |ID_Заказа (FK)      |                     |
  +--------------------+    +---------+----------+                     |
                                     | (многие)
                                     v
                          Номенклатура
                          +-----------------------+
                          |ID_Номенклатуры (PK)  |
                          |Наименование          |
                          |ЕдиницаИзмерения      |
                          +-----------------------+
```

- **PK** — Primary Key (основной ключ).  
- **FK** — Foreign Key (внешний ключ).  

В таком виде видно, что «ПозицияЗаказа» ссылается и на «Заказ», и на «Номенклатуру».

---

## 6. Ограничения и правила в предметной области

- **Нельзя создать заказ без контрагента**.  
- **Нельзя иметь позицию заказа без номенклатуры, количества и цены** (в нормальном кейсе).  
- **СуммаДокумента** вычисляется автоматически, как сумма всех позиций.  
- **Контрагент** может участвовать в нескольких заказах.

---

## 7. Для чего нужна Domain Model?

1. **Общение с бизнесом**:  
   - Доменная модель помогает объяснить, какие сущности и связи существуют в системе, без «1С-терминологии» (Справочник, Документ, Регистр).  
   - «Мы имеем сущности: Клиенты, Товары, Заказы, Позиции в заказах…»

2. **Основа для реализации**:  
   - На основе доменной модели строим схемы БД (таблицы), классы в коде (Go, C# и т.д.), REST-эндпойнты ("/api/clients", "/api/products", "/api/orders"…)  
   - Доменная логика (расчёт суммы, проверка реквизитов) становится частью бизнес-сервисов в приложении.

3. **Расширяемость**:  
   - Можно добавлять поля (например, скидки, адрес доставки), новые сущности (склад, платежи) — это всё отражается в доменной модели.

---

### Итог

Таким образом, **Domain Model** выделяет четыре ключевые сущности:  
- **Контрагент** (Client),  
- **Номенклатура** (Product / Item),  
- **Заказ** (Order),  
- **ПозицияЗаказа** (OrderLine),  

и описывает, как они **связаны** и **какую бизнес-логику** реализуют (расчёт сумм, проведение). Это даёт **цельное** понимание предметной области «Мини Заказы» вне контекста технических объектов 1С.