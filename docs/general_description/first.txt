Ниже приведён пример **очень компактной** конфигурации 1С, которую можно использовать как **“полигон”** для отработки идей по переводу на веб-стек (HTML+JS + Go). Она охватывает базовые объекты 1С: Справочник, Документ, Регистр, простую бизнес-логику, минимальный интерфейс. При этом функциональность маленькая, чтобы быстро переносить и тестировать.

---

## Концепция мини-конфигурации: «Мини Заказы»

### Структура объектов

1. **Справочник «Номенклатура»**  
   - Реквизиты:  
     - *Наименование* (Строка)  
     - *ЕдиницаИзмерения* (например, шт, кг)  

2. **Справочник «Контрагенты»**  
   - Реквизиты:  
     - *Наименование* (Строка)  
     - *ИНН* (Строка, условно)

3. **Документ «ЗаказПокупателя»**  
   - Шапка:  
     - *Контрагент* (Справочник.Контрагенты)  
     - *Дата* (Дата)  
     - *Номер* (Автонабор или ручной)  
   - Табличная часть «Товары»:  
     - *Номенклатура* (Справочник.Номенклатура)  
     - *Количество* (Число)  
     - *Цена* (Число)  
     - *СуммаСтроки* (Число; рассчитывается как Количество * Цена)  
   - Реквизит документа:  
     - *СуммаДокумента* (Число; итог по табличной части)

4. **Регистры**  
   - Для упрощения можно добавить **РегистрНакопления «ЗаказыПоКонтрагентам»** (необязательный, но покажет механику движений):  
     - Измерения: Контрагент (Справочник.Контрагенты)  
     - Ресурсы: СуммаЗаказов (Число)  
   - При проведении «ЗаказПокупателя» в регистр записывается *СуммаДокумента*.

### Бизнес-логика (псевдокод 1С)

1. **Модуль объекта «ЗаказПокупателя»**  
   ```bsl
   Процедура ПриЗаписи(Отказ, РежимЗаписи)
       // Пересчёт суммы документа по табличной части
       Сумма = 0;
       Для Каждого СтрокаТЧ Из Товары Цикл
           СтрокаТЧ.СуммаСтроки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
           Сумма = Сумма + СтрокаТЧ.СуммаСтроки;
       КонецЦикла;
       СуммаДокумента = Сумма;
   КонецПроцедуры;

   Процедура ПриПроведении(Отказ, РежимПроведения)
       // Формируем движение по регистру "ЗаказыПоКонтрагентам"
       Движения.ЗаказыПоКонтрагентам.Очистить();
       НоваяСтрока = Движения.ЗаказыПоКонтрагентам.Добавить();
       НоваяСтрока.Контрагент   = Контрагент;
       НоваяСтрока.СуммаЗаказов = СуммаДокумента;
   КонецПроцедуры;
   ```

2. **Модуль менеджера «ЗаказПокупателя»**  
   - Можно сделать процедуру “СоздатьЗаказ” или “НайтиЗаказПоНомеру” для демонстрации поиска и создания документа.

### Формы

1. **Форма списка «ЗаказПокупателя»**  
   - Содержит список всех заказов с колонками «Номер», «Дата», «Контрагент», «СуммаДокумента».  
   - Кнопки: «Создать», «Изменить», «Провести», «Удалить».

2. **Форма объекта «ЗаказПокупателя»**  
   - Реквизиты шапки: «Контрагент», «Дата», «Номер», «СуммаДокумента» (только чтение).  
   - Табличная часть «Товары»: «Номенклатура», «Количество», «Цена», «СуммаСтроки».  
   - Кнопка «ОК» (сохранить документ).

3. **Форма списка «Номенклатура»** (справочник)  
   - Таблица с наименованием и единицей измерения.

4. **Форма списка «Контрагенты»** (справочник)  
   - Таблица с наименованием и ИНН.

*(Формы можно минимизировать, главное — показать базовый CRUD).*

---

## Почему это удобно для миграции?

- **Небольшой набор объектов**: два справочника, один документ, один регистр. Легко переносить в новый веб-интерфейс и REST API.  
- **Простая логика**: расчёт суммы в табличной части, проведение (движение по регистру). Нет сложных обработок, отчётов, сложных прав доступа.  
- **Минимально необходимый “скелет”** типовой 1С-логики: справочники, документ с табличной частью, проведение, запись в регистр.  
- **Тестовые данные**: можно быстро завести пару «Контрагентов», пару «Номенклатур», создать «ЗаказПокупателя» — всё видно и прозрачно.

---

## Как использовать эту мини-конфигурацию для обучения миграции

1. **Шаг 1**: Создать (или взять готовый шаблон) конфигурацию в 1С с этими четырьмя объектами, написать минимальные модули и формы.  
2. **Шаг 2**: Попробовать выгрузить конфигурацию средствами `v8unpack`, разобрать код модулей с помощью `bsl-parser` или других инструментов.  
3. **Шаг 3**: Создать схему в PostgreSQL (или иной СУБД) для хранения:  
   - Таблица «nomenculature» (аналог Справочника «Номенклатура»),  
   - Таблица «counterparties» (аналог «Контрагенты»),  
   - Таблица «orders» (аналог «ЗаказПокупателя»),  
   - Таблица «order_items» (табличная часть),  
   - Таблица «orders_register» (аналог «РегистрНакопления»).  
4. **Шаг 4**: Написать простой REST-сервис на Go:  
   - Методы: `POST /api/orders`, `GET /api/orders`, `PUT /api/orders/:id`, `DELETE /api/orders/:id`,  
   - Аналогично для справочников.  
   - Логику расчёта «СуммаДокумента» и записи в «orders_register» встроить в код Go.  
5. **Шаг 5**: Сделать **мини-фронтенд** на HTML+JS (или React/Vue), отобразить список заказов, форму редактирования, вызывать API для расчёта суммы/сохранения.  
6. **Шаг 6**: Сравнить поведение «в 1С» и «в веб-версии». Проверить, что суммы считаются одинаково, проведение и регистр отрабатывают аналогично.  
7. **Шаг 7**: После успешного тестирования можно масштабировать опыт на более крупные модули.

---

### Вывод

Эта мини-конфигурация **“Мини Заказы”** — отличный старт для:

- Отработки технологий **выгрузки/анализа** конфигурации 1С.  
- Тренировки в **проектировании** БД, **REST API** и **веб-форм**.  
- Наглядного понимания, как “типовая” логика (табличная часть, проведение, регистры) отражается в Go + JS.

Дальше можно наращивать функциональность: добавить **отчёт** (псевдо-«Отчёт по заказам»), роли/права, интеграции, — и постепенно осваивать все аспекты миграции более сложных конфигураций.